USE MASTER
GO
IF EXISTS (SELECT NAME FROM ..SYSDATABASES WHERE NAME = 'HOCSINH')
	DROP DATABASE HOCSINH
GO 
CREATE DATABASE HOCSINH
GO 
USE HOCSINH

/*ĐÂY LÀ SQL TRONG PTTKHT BÀI TẬP 1 E NỘP THẦY LUÔN VỚI LẠI E CŨNG LẤY CÁI DATABASE LÀM TRONG BÀI NÀY LUÔN Ạ*/

GO
CREATE TABLE STUDENTS
(
	MASV		INT,
	FULLNAME	NVARCHAR(50),
	AGE			INT,
	EMAIL		NVARCHAR(50),
	CONSTRAINT PK_MASV PRIMARY KEY(MASV)
)
GO
CREATE TABLE CLASSS
(
	CLASSID		INT,
	CLASSNAME	NVARCHAR(50),
	CONSTRAINT PK_CLASSID PRIMARY KEY(CLASSID)
)
GO
CREATE TABLE SUBJECTS
(
	SUBJECTSID	INT,
	SUBJECTSNAME	NVARCHAR(50),
	CONSTRAINT PK_SUBJECTSID PRIMARY KEY(SUBJECTSID)
)
GO
CREATE TABLE CLASSSTUDENT
(
	CLASSID	INT,
	MASV	INT,
	CONSTRAINT PK_MASV_CLASSID PRIMARY KEY(MASV,CLASSID)
)
GO
CREATE TABLE MARK
(
	SUBJECTSID	INT,
	MASV		INT,
	MARK		FLOAT,
	CONSTRAINT PK_SUBJECTSID_MASV PRIMARY KEY(SUBJECTSID,MASV)
)
GO

/*CREATE REFERENCES*/
ALTER TABLE CLASSSTUDENT
	ADD CONSTRAINT FK_CALSSSTUDENT_STUDENTS FOREIGN KEY(MASV)
		REFERENCES STUDENTS(MASV)
GO
ALTER TABLE CLASSSTUDENT
	ADD CONSTRAINT FK_CLASSSTUDENT_CLASSS FOREIGN KEY(CLASSID)
		REFERENCES CLASSS(CLASSID)
GO
ALTER TABLE MARK
	ADD CONSTRAINT FK_MARK_STUDENTS FOREIGN KEY(MASV)
		REFERENCES STUDENTS(MASV)
GO		
ALTER TABLE MARK		
	ADD CONSTRAINT FK_MARK_SUBJECTS FOREIGN KEY(SUBJECTSID)
		REFERENCES SUBJECTS(SUBJECTSID)		
GO
/*INSET INTO STUDENTS*/
INSERT INTO STUDENTS
	VALUES (1,N'NGUYỄN VĂN ĐOÀN',30,'DOANNV@GMAIL.COM')		
INSERT INTO STUDENTS
	VALUES (2,N'NGUYỄN CÔNG VINH',20,'VINH@SPORT.VN')
INSERT INTO STUDENTS
	VALUES (3,N'NGUYỄN VĂN QUYẾN',19,'QUYEN@GMAIL.COM')
INSERT INTO STUDENTS
	VALUES (4,N'PHẠM THANH BÌNH',25,'BINH@GMAIL.COM')
INSERT INTO STUDENTS
	VALUES (5,N'NGUYỄN VĂN TÀI EM',30,'TAIEM@GMAIL.COM')	
SELECT * FROM STUDENTS
	
/*INSERT INTO CLASS*/
INSERT INTO CLASSS
	VALUES (1,'Y2016JC36')
INSERT INTO CLASSS
	VALUES (2,'Y2016CS38')
	
/*INSERT INTO CLASSSTUDENT*/
INSERT INTO CLASSSTUDENT
	VALUES (1,1)
INSERT INTO CLASSSTUDENT
	VALUES (1,2)
INSERT INTO CLASSSTUDENT
	VALUES (1,3)
INSERT INTO CLASSSTUDENT
	VALUES (2,4)
INSERT INTO CLASSSTUDENT
	VALUES (2,5)								

/*INSERT INTO SUBJECTS*/
INSERT INTO SUBJECTS
	VALUES (1,'SQL')	
INSERT INTO SUBJECTS
	VALUES (2,'JAVA')
INSERT INTO SUBJECTS
	VALUES (3,'C++')
INSERT INTO SUBJECTS
	VALUES (4,'VISUAL BASIC')
	
/*INSERT INTO MARK*/
INSERT INTO MARK
	VALUES (1,1,8)
INSERT INTO MARK
	VALUES (2,1,4)
INSERT INTO MARK
	VALUES (2,2,9)
INSERT INTO MARK
	VALUES (1,3,7)
INSERT INTO MARK
	VALUES (1,4,3)
INSERT INTO MARK
	VALUES (2,5,5)
INSERT INTO MARK
	VALUES (3,3,8)
INSERT INTO MARK
	VALUES (3,5,1)
INSERT INTO MARK
	VALUES (2,4,3)								

/*THỰC THI TRUY VẤN*/

/*CÂU 1: HIỂN THỊ TẤT CẢ DANH SÁCH HỌC VIÊN*/
CREATE PROC SP_SHOWALLSTUENT
AS
BEGIN
	SELECT * FROM STUDENTS
END	
GO
EXECUTE SP_SHOWALLSTUENT

/*CÂU 2: HIỂN THỊ TẤT CẢ DANH SÁCH LƠP HỌC*/
CREATE PROC SP_SHOWALLCLASS
AS
BEGIN
	SELECT * FROM CLASSS
END
GO
EXECUTE SP_SHOWALLCLASS

/*CÂU 3: TÍNH ĐIỂM TRUNG BÌNH CỦA CÁC MÔN HỌC CÓ SẮP XẾP THEO ĐIỂM TỪ CAO XUỐNG THẤP*/
CREATE PROC SP_AVG
AS
BEGIN
	SELECT S.SUBJECTSNAME,AVG(M.MARK) AS DTB
	FROM MARK M, SUBJECTS S
	WHERE M.SUBJECTSID = S.SUBJECTSID
	GROUP BY M.MARK,S.SUBJECTSNAME
	ORDER BY (M.MARK) ASC
END
GO
EXECUTE SP_AVG
GO
SELECT * FROM SUBJECTS	
GO
SELECT * FROM MARK

/*CÂU 4: HIỂN THỊ MÔN HỌC CÓ HỌC SINH CAO ĐIỂM NHẤT*/	
SELECT  SUBJECTSNAME,MAX(MARK) AS [MÔN HỌC CÓ ĐIỂM CAO NHẤT]
FROM MARK, SUBJECTS
GROUP BY SUBJECTSNAME

/*CÂU 5: SỬ DỤNG HÀM RANK() ĐỂ SẮP XẾP THỨ TỰ BẬC THEO ĐIỂM TỪ CAO XUỐNG THẤP CỦA TỪNG MÔN*/
CREATE PROC SP_SORT_MARK
AS
BEGIN
	SELECT S.SUBJECTSID, SUBJECTSNAME, STU.MASV, FULLNAME, MARK, ROW_NUMBER() OVER (PARTITION BY SUBJECTSNAME ORDER BY (SELECT SUBJECTSNAME)) AS [RANK BY MARK]
	FROM SUBJECTS S, MARK M, STUDENTS STU
	WHERE M.SUBJECTSID = S.SUBJECTSID
	AND M.MASV = STU.MASV
	GROUP BY S.SUBJECTSNAME, S.SUBJECTSID, STU.MASV, STU.FULLNAME, M.MARK
	ORDER BY SUBJECTSID, MASV ASC
END
GO
EXECUTE SP_SORT_MARK

/*CÂU 6: HIỂN THỊ TOP 3 BẢN GHI CÓ SỐ ĐIỂM CAO NHẤT VỚI HÀM TOP VÀ TIES()*/
CREATE PROC SP_TOP_3
AS
BEGIN
	SELECT TOP 3 WITH TIES MARK,SUBJECTSNAME,FULLNAME
	FROM MARK M, STUDENTS STU, SUBJECTS S
	WHERE M.MASV = STU.MASV
	AND M.SUBJECTSID = S.SUBJECTSID
	ORDER BY MARK DESC
END
GO
EXECUTE SP_TOP_3

/*CÂU 7: HIỂN THỊ THÔNG TIN ĐIỂM ĐƯỢC NHÓM THEO CÁC MÔN HỌC*/
CREATE PROC SP_SHOW_MARK
AS
BEGIN
	SELECT SUBJECTSNAME, FULLNAME, MARK, ROW_NUMBER() OVER (PARTITION BY SUBJECTSNAME ORDER BY (SELECT SUBJECTSNAME)) AS [RANK]
	FROM SUBJECTS S, MARK M, STUDENTS STU
	WHERE M.SUBJECTSID = S.SUBJECTSID
		AND M.MASV = STU.MASV
	GROUP BY S.SUBJECTSNAME, STU.FULLNAME, M.MARK
END
GO
EXECUTE SP_SHOW_MARK

/*CÂU 8: */
	/*THÊM CỘT CÓ TÊM LÀ STATUS VÀO TRONG BẢNG STUDENTS*/
	ALTER TABLE STUDENTS
	ADD STATUS BIT
	
	/*CẬP NHẬT STATUS = 0 (ĐANG THEO HỌC) VỚI NHỮNG SINH VIÊN 1->4 VÀ STATUS = 1 (NGHỈ HỌC)*/
	UPDATE STUDENTS
	SET STATUS = 0
	WHERE MASV = 1
	
	UPDATE STUDENTS
	SET STATUS = 0
	WHERE MASV = 2 
	
	UPDATE STUDENTS
	SET STATUS = 0
	WHERE MASV = 3
	
	UPDATE STUDENTS
	SET STATUS = 0
	WHERE MASV = 4
	
	UPDATE STUDENTS
	SET STATUS = 1
	WHERE MASV = 5
	
	SELECT MASV, FULLNAME, AGE, EMAIL,
		CASE STATUS
			WHEN 0 THEN N'ĐANG ĐI HỌC' ELSE N'NGHỈ HỌC'
		END AS STATUS	 
	FROM STUDENTS
	
/*CÂU 9: THÊM MỚI 1 HỌC VIÊN*/
CREATE PROC SP_ADD_STUDENTS
(
	@MASV		INT,
	@FULLNAME	NVARCHAR(50),
	@AGE		INT,
	@EMAIL		NVARCHAR(50),
	@STATUS		BIT
)
AS
BEGIN
	INSERT INTO STUDENTS
		VALUES (@MASV, @FULLNAME, @AGE, @EMAIL, @STATUS) 
END	
GO
EXECUTE SP_ADD_STUDENTS
		@MASV		= 7,
		@FULLNAME	= N'NGUYỄN CÔNG PHƯỢNG',
		@AGE		= 21,
		@EMAIL		= 'PHUONGNV@GMAIL.COM',
		@STATUS		= 0
GO		
SELECT MASV, FULLNAME, AGE, EMAIL,
	CASE STATUS
		WHEN 0 THEN N'ĐANG ĐI HỌC' ELSE N'NGHỈ HỌC'
	END AS STATUS	 
FROM STUDENTS

/*CÂU 10: CẬP NHẬT THÔNG TIN TUỔI = 30 CHO SINH VIÊN VỚI MÃ SỐ  = 6 VÀ STATUS = 0*/
CREATE PROC SP_UPDATE_AGE
(
	@MASV	INT,
	@AGE	INT,
	@STATUS	BIT	
)
AS
BEGIN
	UPDATE STUDENTS
	SET AGE = @AGE
	WHERE MASV = @MASV
	AND STATUS = @STATUS
END
GO
EXECUTE SP_UPDATE_AGE
		@MASV	= 6,
		@AGE	= 30,
		@STATUS = 0
GO
SELECT MASV, FULLNAME, AGE, EMAIL,
	CASE STATUS
		WHEN 0 THEN N'ĐANG ĐI HỌC' ELSE N'NGHỈ HỌC'
	END AS STATUS	 
FROM STUDENTS

/*CÂU 11: */		
	
	/*HIỂN THỊ THÔNG TIN SINH VIÊN BẮT ĐẦU BẰNG CHỮ N*/
	SELECT MASV, FULLNAME, AGE, EMAIL,
		CASE STATUS
			WHEN 0 THEN N'ĐANG ĐI HỌC' ELSE N'NGHỈ HỌC'
		END AS STATUS	 
	FROM STUDENTS
	WHERE FULLNAME LIKE '[N]%'
	
	/*HIỂN THỊ THÔNG TIN SINH VIÊN CÓ KÝ TỰ CUỐI LÀ N*/
	SELECT MASV, FULLNAME, AGE, EMAIL,
		CASE STATUS
			WHEN 0 THEN N'ĐANG ĐI HỌC' ELSE N'NGHỈ HỌC'
		END AS STATUS	 
	FROM STUDENTS
	WHERE FULLNAME LIKE '%[N]'
	
	/*HIỂN THỊ THÔNG TIN LỚP HỌC THEO KHUÔN DẠNG SAU "C070__"*/
	SELECT CLASSID,CLASSNAME + SPACE(2)
	FROM CLASSS
	
	/*HIỂN THỊ THÔNG TIN SINH VIÊN CÓ TÊN BẮT ĐẦU THEO 1 TẬP HỢP NHƯ "NPBC"*/
	SELECT MASV, FULLNAME, AGE, EMAIL,
		CASE STATUS
			WHEN 0 THEN N'ĐANG ĐI HỌC' ELSE N'NGHỈ HỌC'
		END AS STATUS	 
	FROM STUDENTS
	WHERE FULLNAME LIKE '[N P B C]%'
	
	SELECT * FROM STUDENTS
	
/*CÂU 12: XÓA SINH VIÊN CÓ MASV = 6*/
CREATE PROC SP_DELETE_STUDENTS
(
	@MASV	INT
)
AS
BEGIN
	DELETE FROM STUDENTS
	WHERE MASV = @MASV	
END	
GO
EXECUTE SP_DELETE_STUDENTS
		@MASV	= 6
GO
SELECT * FROM STUDENTS	
select * from classs



/*BÀI TẬP THẦY GIAO*/
CREATE PROCEDURE SP_SHOW_STU
(
	@CLASSID	INT
)
AS
BEGIN
	SELECT S.MASV, FULLNAME, AGE, EMAIL, CLASSNAME
	FROM STUDENTS S, CLASSS C
	WHERE S.CLASSID = @CLASSID
	AND C.CLASSID = @CLASSID
END	
GO
EXEC SP_SHOW_STUDENT_CLASS
		@CLASSID = 2
EXECUTE SP_SHOW_STUDENT_CLASS

ALTER TABLE STUDENTS
	ADD CLASSID	INT
UPDATE STUDENTS
SET CLASSID = 2
WHERE MASV = 2
SELECT * FROM CLASSS	
